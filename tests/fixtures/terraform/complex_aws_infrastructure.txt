Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
  ~ update in-place
  - destroy
 <= read (data resources)

Terraform will perform the following actions:

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                          = "10.0.0.0/16"
      + default_network_acl_id              = (known after apply)
      + default_route_table_id              = (known after apply)
      + default_security_group_id           = (known after apply)
      + dhcp_options_id                     = (known after apply)
      + enable_classiclink                  = false
      + enable_classiclink_dns_support      = false
      + enable_dns_hostnames                = true
      + enable_dns_support                  = true
      + id                                  = (known after apply)
      + instance_tenancy                    = "default"
      + ipv6_association_id                 = (known after apply)
      + ipv6_cidr_block                     = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                 = (known after apply)
      + owner_id                            = (known after apply)
      + tags                                = {
          + "Environment"     = "production"
          + "Name"           = "main-vpc"
          + "Project"        = "microservices-platform"
          + "Team"           = "platform-engineering"
        }
      + tags_all                            = {
          + "Environment"     = "production"
          + "Name"           = "main-vpc"
          + "Project"        = "microservices-platform"
          + "Team"           = "platform-engineering"
        }
    }

  # aws_internet_gateway.main will be created
  + resource "aws_internet_gateway" "main" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Environment" = "production"
          + "Name"        = "main-igw"
        }
      + tags_all = {
          + "Environment" = "production"
          + "Name"        = "main-igw"
        }
      + vpc_id   = (known after apply)
    }

  # aws_subnet.private_a will be created
  + resource "aws_subnet" "private_a" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "us-west-2a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Environment" = "production"
          + "Name"        = "private-subnet-a"
          + "Type"        = "private"
        }
      + tags_all                                       = {
          + "Environment" = "production"
          + "Name"        = "private-subnet-a"
          + "Type"        = "private"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_rds_cluster.postgresql will be created
  + resource "aws_rds_cluster" "postgresql" {
      + allocated_storage                   = (known after apply)
      + apply_immediately                   = true
      + arn                                 = (known after apply)
      + availability_zones                  = (known after apply)
      + backup_retention_period             = 30
      + cluster_identifier                  = "prod-postgresql-cluster"
      + cluster_identifier_prefix           = (known after apply)
      + cluster_resource_id                 = (known after apply)
      + copy_tags_to_snapshot               = true
      + database_name                       = "production_db"
      + db_cluster_parameter_group_name     = (known after apply)
      + db_subnet_group_name                = (known after apply)
      + deletion_protection                 = true
      + enabled_cloudwatch_logs_exports     = [
          + "postgresql",
        ]
      + endpoint                            = (known after apply)
      + engine                              = "aurora-postgresql"
      + engine_mode                         = "provisioned"
      + engine_version                      = "13.7"
      + final_snapshot_identifier           = (known after apply)
      + hosted_zone_id                      = (known after apply)
      + iam_database_authentication_enabled = true
      + iam_roles                           = (known after apply)
      + id                                  = (known after apply)
      + kms_key_id                          = (known after apply)
      + master_password                     = (sensitive value)
      + master_username                     = "postgres"
      + network_type                        = (known after apply)
      + port                                = 5432
      + preferred_backup_window             = "03:00-04:00"
      + preferred_maintenance_window        = "sun:04:00-sun:05:00"
      + reader_endpoint                     = (known after apply)
      + skip_final_snapshot                 = false
      + storage_encrypted                   = true
      + tags                                = {
          + "Environment" = "production"
          + "Name"        = "postgresql-cluster"
          + "Service"     = "database"
        }
      + tags_all                            = {
          + "Environment" = "production"
          + "Name"        = "postgresql-cluster"
          + "Service"     = "database"
        }
      + vpc_security_group_ids              = (known after apply)

      + serverlessv2_scaling_configuration {
          + max_capacity = 16
          + min_capacity = 0.5
        }
    }

  # data.aws_availability_zones.available will be read during apply
  # (config refers to values not yet known)
 <= data "aws_availability_zones" "available" {
      + group_names = (known after apply)
      + id          = (known after apply)
      + names       = (known after apply)
      + zone_ids    = (known after apply)

      + filter {
          + name   = "opt-in-status"
          + values = [
              + "opt-in-not-required",
            ]
        }
    }

  # data.aws_iam_policy_document.ecs_task_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "ecs_task_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions = [
              + "logs:CreateLogGroup",
              + "logs:CreateLogStream",
              + "logs:PutLogEvents",
              + "logs:DescribeLogStreams",
            ]
          + effect    = "Allow"
          + resources = ["*"]
          + sid       = "AllowLogging"
        }

      + statement {
          + actions = [
              + "s3:GetObject",
              + "s3:PutObject",
              + "s3:DeleteObject",
            ]
          + effect    = "Allow"
          + resources = ["arn:aws:s3:::prod-app-storage/*"]
          + sid       = "AllowS3Access"
        }

      + statement {
          + actions = [
              + "secretsmanager:GetSecretValue",
              + "secretsmanager:DescribeSecret",
            ]
          + effect    = "Allow"
          + resources = ["arn:aws:secretsmanager:us-west-2:123456789012:secret:prod/*"]
          + sid       = "AllowSecretsAccess"
        }
    }

  # aws_security_group.web_server will be updated in-place
  ~ resource "aws_security_group" "web_server" {
        arn                    = "arn:aws:ec2:us-west-2:123456789012:sg-0123456789abcdef0"
        description            = "Security group for web servers"
        egress                 = [
            {
                cidr_blocks      = [
                    "0.0.0.0/0",
                ]
                description      = "All outbound traffic"
                from_port        = 0
                ipv6_cidr_blocks = []
                prefix_list_ids  = []
                protocol         = "-1"
                security_groups  = []
                self             = false
                to_port          = 0
            },
        ]
        id                     = "sg-0123456789abcdef0"
        ingress                = [
          + {
              + cidr_blocks      = [
                  + "10.0.0.0/8",
                ]
              + description      = "Internal network access"
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8080
            },
            {
                cidr_blocks      = [
                    "0.0.0.0/0",
                ]
                description      = "HTTP"
                from_port        = 80
                ipv6_cidr_blocks = []
                prefix_list_ids  = []
                protocol         = "tcp"
                security_groups  = []
                self             = false
                to_port          = 80
            },
          ~ {
              ~ cidr_blocks      = [
                  - "0.0.0.0/0",
                  + "10.0.0.0/16",
                ]
                description      = "HTTPS"
                from_port        = 443
                ipv6_cidr_blocks = []
                prefix_list_ids  = []
                protocol         = "tcp"
                security_groups  = []
                self             = false
                to_port          = 443
            },
          - {
              - cidr_blocks      = [
                  - "0.0.0.0/0",
                ]
              - description      = "SSH (to be removed)"
              - from_port        = 22
              - ipv6_cidr_blocks = []
              - prefix_list_ids  = []
              - protocol         = "tcp"
              - security_groups  = []
              - self             = false
              - to_port          = 22
            },
        ]
        name                   = "web-server-sg"
        name_prefix            = (known after apply)
        owner_id               = "123456789012"
        revoke_rules_on_delete = false
      ~ tags                   = {
            "Environment" = "production"
          + "LastModified" = "2025-08-10"
          ~ "Name"         = "web-server-security-group" -> "web-server-sg-updated"
          - "Temporary"    = "false"
        }
      ~ tags_all               = {
            "Environment" = "production"
          + "LastModified" = "2025-08-10"
          ~ "Name"         = "web-server-security-group" -> "web-server-sg-updated"
          - "Temporary"    = "false"
        }
        vpc_id                 = "vpc-0987654321fedcba0"
    }

  # aws_ecs_service.api will be updated in-place
  ~ resource "aws_ecs_service" "api" {
        arn                                = "arn:aws:ecs:us-west-2:123456789012:service/prod-cluster/api-service"
        cluster                            = "arn:aws:ecs:us-west-2:123456789012:cluster/prod-cluster"
      ~ desired_count                      = 3 -> 5
        enable_ecs_managed_tags            = true
        enable_execute_command             = false
        health_check_grace_period_seconds  = 60
        iam_role                           = (known after apply)
        id                                 = "arn:aws:ecs:us-west-2:123456789012:service/prod-cluster/api-service"
        launch_type                        = "FARGATE"
        name                               = "api-service"
        platform_version                   = "LATEST"
        propagate_tags                     = "TASK_DEFINITION"
        scheduling_strategy                = "REPLICA"
        tags                               = {
            "Environment" = "production"
            "Service"     = "api"
        }
        tags_all                           = {
            "Environment" = "production"
            "Service"     = "api"
        }
        task_definition                    = "prod-api:47"
        triggers                           = {}
        wait_for_steady_state              = false

        deployment_configuration {
          ~ maximum_percent         = 200 -> 300
          ~ minimum_healthy_percent = 50 -> 75
            rollback_trigger {
                cloudwatch_metric_alarms = []
                event_type              = "DEPLOYMENT_FAILURE"
            }
        }

        load_balancer {
            container_name   = "api"
            container_port   = 8080
            target_group_arn = "arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/api-tg/50dc6c495c0c9188"
        }

        network_configuration {
            assign_public_ip = false
            security_groups  = [
                "sg-0123456789abcdef0",
              + "sg-0abcdef123456789",
            ]
          ~ subnets          = [
              - "subnet-0123456789abcdef0",
              + "subnet-0abcdef123456789",
              + "subnet-0fedcba987654321",
                "subnet-0987654321fedcba0",
            ]
        }

        service_registries {
            registry_arn = "arn:aws:servicediscovery:us-west-2:123456789012:service/srv-abcd1234"
        }
    }

  # aws_cloudfront_distribution.api_cdn will be updated in-place
  ~ resource "aws_cloudfront_distribution" "api_cdn" {
        arn                            = "arn:aws:cloudfront::123456789012:distribution/E1ABCD2EFGHIJK"
        caller_reference               = "terraform-20240101120000000000000001"
        comment                        = "CDN for API Gateway"
        default_root_object            = ""
        domain_name                    = "d1234567890123.cloudfront.net"
        enabled                        = true
        etag                           = "E12ABCD3EFGHIJK"
        hosted_zone_id                 = "Z2FDTNDATAQYW2"
        http_version                   = "http2"
        id                             = "E1ABCD2EFGHIJK"
        in_progress_validation_batches = 0
        is_ipv6_enabled                = true
        last_modified_time             = "2024-01-01 12:00:00 +0000 UTC"
      ~ price_class                    = "PriceClass_100" -> "PriceClass_All"
        retain_on_delete               = false
        status                         = "Deployed"
        tags                           = {
            "Environment" = "production"
            "Service"     = "api-cdn"
        }
        tags_all                       = {
            "Environment" = "production"
            "Service"     = "api-cdn"
        }
        trusted_key_groups             = []
        trusted_signers                = []
        wait_for_deployment            = true
        web_acl_id                     = ""

        default_cache_behavior {
          ~ allowed_methods        = [
              - "DELETE",
              - "GET",
              - "HEAD",
              - "OPTIONS",
              - "PATCH",
              - "POST",
              - "PUT",
              + "GET",
              + "HEAD",
              + "OPTIONS",
            ]
          ~ cached_methods         = [
              - "GET",
              - "HEAD",
              - "OPTIONS",
              + "GET",
              + "HEAD",
            ]
            compress               = true
          ~ default_ttl            = 86400 -> 3600
            field_level_encryption = ""
          ~ max_ttl                = 31536000 -> 86400
          ~ min_ttl                = 0 -> 0
            smooth_streaming       = false
            target_origin_id       = "api-origin"
            trusted_key_groups     = []
            trusted_signers        = []
          ~ viewer_protocol_policy = "redirect-to-https" -> "https-only"

            forwarded_values {
                headers                 = []
                query_string            = false
                query_string_cache_keys = []

                cookies {
                    forward           = "none"
                    whitelisted_names = []
                }
            }
        }

        origin {
            connection_attempts = 3
            connection_timeout  = 10
          ~ domain_name         = "api.example.com" -> "api-v2.example.com"
            origin_id           = "api-origin"
            origin_path         = ""

          ~ custom_origin_config {
              ~ http_port                = 80 -> 8080
              ~ https_port               = 443 -> 8443
              ~ origin_keepalive_timeout = 5 -> 10
              ~ origin_protocol_policy   = "http-only" -> "https-only"
              ~ origin_read_timeout      = 30 -> 60
              ~ origin_ssl_protocols     = [
                  - "SSLv3",
                  - "TLSv1",
                  + "TLSv1.2",
                  + "TLSv1.3",
                ]
            }
        }

        restrictions {
            geo_restriction {
              ~ locations        = [
                  - "US",
                  + "CA",
                  + "GB",
                  + "US",
                ]
              ~ restriction_type = "whitelist" -> "blacklist"
            }
        }

        viewer_certificate {
            acm_certificate_arn            = "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012"
            cloudfront_default_certificate = false
            iam_certificate_id             = ""
          ~ minimum_protocol_version       = "TLSv1.2_2021" -> "TLSv1.3_2022"
            ssl_support_method             = "sni-only"
        }
    }

  # aws_s3_bucket.legacy_storage will be destroyed
  - resource "aws_s3_bucket" "legacy_storage" {
      - arn                         = "arn:aws:s3:::legacy-storage-bucket-20240101" -> null
      - bucket                      = "legacy-storage-bucket-20240101" -> null
      - bucket_domain_name          = "legacy-storage-bucket-20240101.s3.amazonaws.com" -> null
      - bucket_regional_domain_name = "legacy-storage-bucket-20240101.s3.us-west-2.amazonaws.com" -> null
      - force_destroy               = false -> null
      - hosted_zone_id              = "Z3BJ6K6RIION7M" -> null
      - id                          = "legacy-storage-bucket-20240101" -> null
      - object_lock_enabled         = false -> null
      - policy                      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "s3:GetObject"
                      - Effect    = "Allow"
                      - Principal = "*"
                      - Resource  = "arn:aws:s3:::legacy-storage-bucket-20240101/*"
                      - Sid       = "PublicReadGetObject"
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - region                      = "us-west-2" -> null
      - request_payer               = "BucketOwner" -> null
      - tags                        = {
          - "Environment" = "production"
          - "Legacy"      = "true"
          - "Name"        = "legacy-storage"
          - "ToDelete"    = "2025-01-01"
        } -> null
      - tags_all                    = {
          - "Environment" = "production"
          - "Legacy"      = "true"
          - "Name"        = "legacy-storage"
          - "ToDelete"    = "2025-01-01"
        } -> null

      - grant {
          - id          = "1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef" -> null
          - permissions = [
              - "FULL_CONTROL",
            ] -> null
          - type        = "CanonicalUser" -> null
        }

      - lifecycle_rule {
          - abort_incomplete_multipart_upload_days = 7 -> null
          - enabled                                = true -> null
          - id                                     = "delete_old_versions" -> null
          - tags                                   = {} -> null

          - expiration {
              - days                         = 90 -> null
              - expired_object_delete_marker = false -> null
            }

          - noncurrent_version_expiration {
              - days = 30 -> null
            }
        }

      - public_access_block {
          - block_public_acls       = false -> null
          - block_public_policy     = false -> null
          - ignore_public_acls      = false -> null
          - restrict_public_buckets = false -> null
        }

      - server_side_encryption_configuration {
          - rule {
              - bucket_key_enabled = false -> null

              - apply_server_side_encryption_by_default {
                  - sse_algorithm = "AES256" -> null
                }
            }
        }

      - versioning {
          - enabled    = true -> null
          - mfa_delete = false -> null
        }
    }

  # aws_lambda_function.data_processor will be destroyed
  - resource "aws_lambda_function" "data_processor" {
      - arn                            = "arn:aws:lambda:us-west-2:123456789012:function:data-processor" -> null
      - code_signing_config_arn        = "" -> null
      - description                    = "Legacy data processor - being replaced by ECS task" -> null
      - filename                       = "data-processor.zip" -> null
      - function_name                  = "data-processor" -> null
      - handler                        = "index.handler" -> null
      - id                             = "data-processor" -> null
      - invoke_arn                     = "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:123456789012:function:data-processor/invocations" -> null
      - kms_key_arn                    = "" -> null
      - last_modified                  = "2024-01-01T12:00:00.000+0000" -> null
      - memory_size                    = 128 -> null
      - package_type                   = "Zip" -> null
      - publish                        = false -> null
      - qualified_arn                  = "arn:aws:lambda:us-west-2:123456789012:function:data-processor:$LATEST" -> null
      - reserved_concurrent_executions = -1 -> null
      - role                           = "arn:aws:iam::123456789012:role/lambda-data-processor-role" -> null
      - runtime                        = "python3.9" -> null
      - s3_bucket                      = "" -> null
      - s3_key                         = "" -> null
      - s3_object_version              = "" -> null
      - source_code_hash               = "abcdef1234567890abcdef1234567890abcdef12" -> null
      - source_code_size               = 1024 -> null
      - tags                           = {
          - "Environment" = "production"
          - "Function"    = "data-processing"
          - "Legacy"      = "true"
          - "Runtime"     = "python3.9"
        } -> null
      - tags_all                       = {
          - "Environment" = "production"
          - "Function"    = "data-processing"
          - "Legacy"      = "true"
          - "Runtime"     = "python3.9"
        } -> null
      - timeout                        = 300 -> null
      - version                        = "$LATEST" -> null

      - environment {
          - variables = {
              - "DB_HOST"     = "prod-postgresql-cluster.cluster-abcd1234.us-west-2.rds.amazonaws.com"
              - "ENVIRONMENT" = "production"
              - "LOG_LEVEL"   = "INFO"
              - "S3_BUCKET"   = "legacy-storage-bucket-20240101"
            } -> null
        }

      - tracing_config {
          - mode = "PassThrough" -> null
        }
    }

Plan: 4 to add, 3 to change, 2 to destroy.

Changes to Outputs:

  + api_endpoint = (known after apply)
  + database_endpoint = (known after apply)
  + vpc_id = (known after apply)
  - legacy_bucket_name = "legacy-storage-bucket-20240101" -> null
  - legacy_lambda_arn = "arn:aws:lambda:us-west-2:123456789012:function:data-processor" -> null

Warning: Resource targeting is in effect

You are creating a plan with the -target option, which means that the result
of this plan may not represent all of the changes requested by the current
configuration.

The -target option is not for routine use, and is provided only for
exceptional situations such as recovering from errors or mistakes, or when
Terraform specifically suggests to use it as part of an error message.

Warning: Deprecated argument

  on main.tf line 45, in resource "aws_s3_bucket" "legacy_storage":
  45:   acl    = "public-read"

The argument "acl" is deprecated. Use the aws_s3_bucket_acl resource instead.

Warning: Lambda runtime deprecation

  on main.tf line 89, in resource "aws_lambda_function" "data_processor":
  89:   runtime = "python3.9"

The Python 3.9 runtime is deprecated and will no longer be supported by AWS Lambda.
Please upgrade to Python 3.11 or later.